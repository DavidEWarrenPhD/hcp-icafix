#! /bin/bash
#
# Run script for flywheel/hcp-icafix Gear.
#
# Authorship: Keith Jamison
#

##############################################################################
# Define directory names and containers

FLYWHEEL_BASE=/flywheel/v0
INPUT_DIR=$FLYWHEEL_BASE/input
OUTPUT_DIR=$FLYWHEEL_BASE/output
SCRIPT_DIR=${FLYWHEEL_BASE}/scripts
SCENE_DIR=${FLYWHEEL_BASE}/scenes
CONFIG_FILE=$FLYWHEEL_BASE/config.json
CONTAINER='[flywheel/hcp-icafix]'

source ${FLYWHEEL_BASE}/docker-env.sh

source ${SCRIPT_DIR}/bash_functions.sh # some useful tools

##############################################################################
# Parse configuration options

# If config.json exists, then we parse config file and cast vals to ENV Vars
# (Flywheel gear run). Otherwise we parse manifest.json and cast the values to
# ENV Vars from manifest (Docker run) Note value.default is used to grab the
# configured defaults.

if [[ -f $CONFIG_FILE ]]; then
  eval $(jq -r '.config | to_entries[] | "FW_CONFIG_\(.key)=\(.value)"' $CONFIG_FILE)
  eval $(jq -r '.inputs | to_entries[] | "FW_INPUT_\(.key)=\(.value.location.path)"' $CONFIG_FILE)
else
  CONFIG_FILE=$FLYWHEEL_BASE/manifest.json
  eval $(jq -r '.config | to_entries[] | "FW_CONFIG_\(.key)=\(.value.default)"' $CONFIG_FILE)
fi

##############################################################################
# use "echo" for testing arguments without running scripts
RUN_FIX=""
RUN_POSTFIX=""
RUN_RSS=""
RUN_QC=""

##############################################################################
# Set some pipeline defaults

source ${SCRIPT_DIR}/SetUpHCPPipeline.sh

StudyFolder=${OUTPUT_DIR}

PRINTCOM=""
QUEUE=""

LogFileDir=logs
LogFileDirFull=${OUTPUT_DIR}/${LogFileDir}
mkdir -p ${LogFileDirFull}
FSLSUBOPTIONS="-l ${LogFileDirFull}"

#######################################
# Process inputs and config options from app


if [[ -z "${FW_INPUT_StructZip}" ]]; then
  echo -e "${CONTAINER} [$(timestamp)] INPUT_DIR has no valid StructZip files!"
  exit 1
else
  StructZipFile="${FW_INPUT_StructZip}"
fi

if [[ -z "${FW_INPUT_FuncZip}" ]]; then
  echo -e "${CONTAINER} [$(timestamp)] INPUT_DIR has no valid FuncZip files!"
  exit 1
else
  FuncZipFile="${FW_INPUT_FuncZip}"
fi

# Extract some info from .json saved in hcpfunc zip file
FuncConfigFile="hcpfunc_config.json"
unzip -p ${FuncZipFile} '*hcpfunc_config.json' > ${FuncConfigFile}
hcpfunc_Subject=$(jq -r '.config.Subject // empty' ${FuncConfigFile})
hcpfunc_RegName=$(jq -r '.config.RegName // empty' ${FuncConfigFile})
hcpfunc_FinalfMRIResolution=$(jq -r '.config.FinalfMRIResolution // empty' ${FuncConfigFile})
hcpfunc_GrayordinatesResolution=$(jq -r '.config.GrayordinatesResolution // empty' ${FuncConfigFile})
hcpfunc_LowResMesh=$(jq -r '.config.LowResMesh // empty' ${FuncConfigFile})
hcpfunc_SmoothingFWHM=$(jq -r '.config.SmoothingFWHM // empty' ${FuncConfigFile})

if [[ -z "${hcpfunc_Subject}" ]]; then
  echo -e "${CONTAINER} [$(timestamp)] ${FuncZipFile} did not contain ${FuncConfigFile}!"
  exit 1
fi

# Select RData file from based on INPUT or CONFIG
unset ClassifierFile
if [[ -e "${FW_INPUT_CustomClassifier}" ]]; then
  # If user provides RData file, use that
  ClassifierFile="${FW_INPUT_CustomClassifier}"
elif [[ ! -z "${FW_CONFIG_FIXClassifier}" ]]; then
  tmpfix=$(basename $(toupper "${FW_CONFIG_FIXClassifier}") .RDATA)
  for f in ${FSL_FIXDIR}/training_files/*.RData; do
    f1=$(toupper $(basename $f .RData))
    if [[ "$f1" = "$tmpfix" ]]; then
      ClassifierFile=$f
      break
    fi
  done
  if [[ ! -e "${ClassifierFile}" ]]; then
    echo -e "${CONTAINER} [$(timestamp)] No RData training file found: ${FW_CONFIG_FIXClassifier}!"
    exit 1
  fi
fi


if [[ -z "${FW_CONFIG_Subject}" ]] || [[ $(toupper "${FW_CONFIG_Subject}") = "EMPTY" ]]; then
  Subject="${hcpfunc_Subject}"
else
  Subject="${FW_CONFIG_Subject}"
fi

if [[ -z "${FW_CONFIG_RegName}" ]] || [[ $(toupper "${FW_CONFIG_RegName}") = "EMPTY" ]]; then
  RegName="${hcpfunc_RegName}"
else
  RegName="${FW_CONFIG_RegName}"
fi

# Must match the HPF of the training dataset (generally 2000sec)
HighPassFilterSeconds="2000"
if [[ ! -z "${FW_CONFIG_HighPassFilter}" ]]; then
  HighPassFilterSeconds="${FW_CONFIG_HighPassFilter}"
fi


# Copy some of the saved hcpfunc config params if present
LowResMesh="32"
FinalfMRIResolution="2"
BrainOrdinatesResolution="2"
SmoothingFWHM="${FinalfMRIResolution}"

if [[ ! -z "${hcpfunc_FinalfMRIResolution}" ]]; then
  FinalfMRIResolution=${hcpfunc_FinalfMRIResolution}
fi

if [[ ! -z "${hcpfunc_GrayordinatesResolution}" ]]; then
  BrainOrdinatesResolution=${hcpfunc_GrayordinatesResolution}
fi

if [[ ! -z "${hcpfunc_LowResMesh}" ]]; then
  LowResMesh=${hcpfunc_LowResMesh}
fi

if [[ ! -z "${hcpfunc_SmoothingFWHM}" ]]; then
  SmoothingFWHM=${hcpfunc_SmoothingFWHM}
fi

################################################################################
# Unzip HCP-Structural and HCP-Functional outputs

echo -e "${CONTAINER} [$(timestamp)] Unzipping HCP-Structural zip"
unzip -o -q ${StructZipFile} -d ${StudyFolder}

# Identify available HCP-Functional inputs
FuncZipList="$FuncZipFile"
for i in 2 3 4 5 6 7 8 9 10; do
  tmpv="FW_INPUT_FuncZip$i"; tmpv=${!tmpv}
  if [[ -e "${tmpv}" ]]; then
    FuncZipList+=" $tmpv"
  fi
done

# For each FuncZip:
# 1. unzip contents
# 2. extract fMRIName from hcpfunc_config.json
fMRINameList=
for FuncZip in ${FuncZipList}; do 
  tmp_FuncConfigFile=`mktemp -d`"/hcpfunc_config.json"
  unzip -p ${FuncZip} '*hcpfunc_config.json' > ${tmp_FuncConfigFile}
  tmp_fMRIName=$(jq -r '.config.fMRIName // empty' ${tmp_FuncConfigFile})
  rm -f ${tmp_FuncConfigFile}
  fMRINameList+=" ${tmp_fMRIName}"
  echo -e "${CONTAINER} [$(timestamp)] Unzipping HCP-Functional zip: " $(basename $FuncZip)
  #only need to unzip MNINonLinear/Results for ICAFIX
  unzip -o -q ${FuncZip} "${Subject}/MNINonLinear/Results/*" -d ${StudyFolder}
done

echo "Orig fMRIName list: $fMRINameList"

#if fMRINames aren't unique, might cause problems later. for now just prune and remove any duplicate names
# how else could we handle this?
fMRINameList=$(echo "$fMRINameList" | tr " " "\n" | sort -u | tr "\n" " ")
echo "Unique fMRIName list: $fMRINameList"

#Create @-separated list of preprocessed nifti for each input
fMRIFileList=
fMRIFileCount=0
for f in ${fMRINameList}; do
  fMRIFile=${StudyFolder}/${Subject}/MNINonLinear/Results/${f}/${f}.nii.gz
  if [ -e "$fMRIFile" ]; then
    fMRIFileList+="${fMRIFile}@"
    fMRIFileCount=$((fMRIFileCount+1))
  else
    echo -e "${CONTAINER} [$(timestamp)] Preprocessed fMRI time-series not found: $f"
  fi
done

if [[ "$fMRIFileCount" == "0" ]]; then
  echo -e "${CONTAINER} [$(timestamp)] No valid HCP-Functional zips!"
  exit 1
fi

# save list of files extracted from hcpstruct zip so we can remove them from output
# (specifically, list of ALL files that exist in OUTPUT_DIR at this point)
FilesToRemove=${OUTPUT_DIR}/to_delete.txt
( cd ${StudyFolder}; find ${Subject}/ -type f ) > ${FilesToRemove}

################################################################################
# Run ICAFIX

if [[ "$fMRIFileCount" == "1" ]]; then
  echo -e "${CONTAINER} [$(timestamp)] Starting: Single-Run ICA-FIX Pipeline"

  # patched version is copied into here
  FixScript=${HCPPIPEDIR}/ICAFIX/hcp_fix
  
  pipeline_status_code=0
  set -x
  ${RUN_FIX} ${FSLDIR}/bin/fsl_sub ${QUEUE} ${FSLSUBOPTIONS} \
    ${FixScript} \
      ${fMRIFileList/@/""} \
      ${HighPassFilterSeconds} \
      ${ClassifierFile}
  set +x
  pipeline_status_code=$?
  
else
  echo -e "${CONTAINER} [$(timestamp)] Starting: Multi-Run ICA-FIX Pipeline"
  
  FixScript=${HCPPIPEDIR}/ICAFIX/hcp_fix_multi_run
  
  #TODO: if we only put the LD_LIBRARY_PATH thing in hcp_fix, it won't get called for hcp_fix_multi_run
  # so we either need to put it in settings.sh (where it might cause melodic to crash)
  # or modify hcp_fix_multi_run?
  # or we could add it to call_matlab.sh and add that to the patch
  
  #TODO: add CONCATNAME folder to to_delete.txt (or just delete it right after this call

  #ConcatName="HCPFIX_CONCATENATED_RUNS"
  ConcatName="ICAFIX_multi"
  for f in ${fMRINameList}; do
    ConcatName+="_${f}"
  done
  ConcatFile="${StudyFolder}/${Subject}/MNINonLinear/Results/${ConcatName}/${ConcatName}.nii.gz"

  pipeline_status_code=0
  set -x
  ${RUN_FIX} ${FSLDIR}/bin/fsl_sub ${QUEUE} ${FSLSUBOPTIONS} \
    ${FixScript} \
      ${fMRIFileList} \
      ${HighPassFilterSeconds} \
      ${ConcatFile} \
      ${ClassifierFile}
  set +x
  pipeline_status_code=$?

fi

# NOTE: Currently these exit codes do NOT reflect success or failure!
if [[ $pipeline_status_code == 0 ]]; then
  echo -e "${CONTAINER} [$(timestamp)] ICA-FIX Success!"
else
  echo -e "${CONTAINER} [$(timestamp)] ICA-FIX Failure!"
  exit 1
fi

################################################################################
# Run PostFix (generate classification scene files)
# TODO: optional, but need to fix Matlab MCR version issues to run this

################################################################################
# Run RestingStateStats (quality metrics after FIX classification and denoising)
# TODO: optional, but need to fix Matlab MCR version issues to run this

################################################################################
# Generate ICAFIX QC Images
# TODO: maybe some volume mosaics with mean and stdev like at the end of hcp-func?

################################################################################
# Clean-up and prepare outputs

# Delete files that came from the HCP-Structural and HCP-Functional zip input
cd ${StudyFolder}
for f in $(cat ${FilesToRemove}); do
  rm -f $f
done
rm -f ${FilesToRemove}

# Add current gear config.json to output for reference in subsequent gears
# - For now, don't copy full input json since it might contain identifiers from DICOM etc
# - add/update .config.RegName since it might not have been included in config (pre-MSM availability)
# - add/update .config.Subject since it might later be pulled from other session metadata
# - add/update .config.fMRINameList so we have a record of which scans went into this
# - This jq call does the value replacement, then selects just .config but stores it back into a 
#    new element called ".config" so the new file can be read as though it was flywheel config.json
OUTPUT_CONFIG_FILE=${StudyFolder}/${Subject}/${Subject}_${fMRIName}_hcpicafix_config.json 
jq -r '.config.RegName = "'$RegName'" | .config.Subject = "'$Subject'" | .config | {config: .}' $CONFIG_FILE \
  | jq -r '.config.fMRINameList = "'${fMRINameList}'"' > ${OUTPUT_CONFIG_FILE}

# If pipeline successful, zip outputs and clean up
outputzipname=${Subject}_${fMRIName}_hcpicafix.zip 
echo -e "${CONTAINER} [$(timestamp)] Zipping output file ${outputzipname}"
ziplistfile=${OUTPUT_DIR}/${outputzipname}.list.txt
rm -f ${ziplistfile} 
rm -f ${OUTPUT_DIR}/${outputzipname}
cd ${StudyFolder}
# include all remaining files in functional output zip
find ${Subject} -type f > ${ziplistfile}
cat ${ziplistfile} | zip ${OUTPUT_DIR}/${outputzipname} -@ > ${OUTPUT_DIR}/${outputzipname}.log
rm -f ${ziplistfile}

# zip pipeline logs
logzipname=pipeline_logs.zip
echo -e "${CONTAINER} [$(timestamp)] Zipping pipeline logs to ${logzipname}"
cd ${OUTPUT_DIR}
zip -r ${OUTPUT_DIR}/${logzipname} ${LogFileDir}/ > ${OUTPUT_DIR}/${logzipname}.log

echo -e "${CONTAINER} [$(timestamp)] Cleaning output directory"
rm -rf ${StudyFolder}/${Subject}/
rm -rf ${LogFileDirFull}/

exit $pipeline_status_code
